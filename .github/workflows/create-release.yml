name: 'Create/Update Release'
run-name: 'Push to release branch ${{ github.ref_name }}'

on:
  push:
    branches:
    - release/*

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  FetchNewVersionsAndElements:
    name: 'Fetch Release Version And Changed Files'
    runs-on: ubuntu-latest
    outputs:
      newReleaseVersion: ${{ steps.get-release-tag.outputs.newReleaseVersion }}
      elementsChanged: ${{ steps.elements-changed-output.outputs.elementsChanged }}
      elementsTags: ${{ steps.get-associated-tags.outputs.elementsTags }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0


    - name: Output elements to run CI for
      id: elements-changed-output
      uses: ./.github/actions/get-changed-elements
      with:
        changed-files-config: 'changed-files-config.json'
        
    - name: 'Get next release version'
      id: get-release-tag
      shell: pwsh
      run: |
        # Get the current branch
        $currentBranch = git rev-parse --abbrev-ref HEAD
        # Get the release version
        $releaseBranchVersion = ($currentBranch -split '/' | Select-Object -Last 1) -replace "v",""
        # Get tags
        git fetch --tags
        $tags = git tag

        # Check for a match between the release version and the tags
        $matchingTag = ($tags -match "^[vV]{1}$releaseBranchVersion$") -replace "v","" | Select-Object -First 1

        # Output result
        if ($matchingTag) {
          Write-Error "A tag matching the release version $releaseBranchVersion was found."
        }
        else {
          Write-Output "Creating a new tag for release branch..."
          "newReleaseVersion=$releaseBranchVersion" >> $env:GITHUB_OUTPUT
        }

    - name: Get tags of elements
      id: get-associated-tags
      shell: pwsh
      run: |
        $tagBody = "### Contents: `r`n"
        $elements = Get-Content changed-files-config.json | ConvertFrom-Json | Select-Object -ExpandProperty elements
        foreach ($element in $elements) {
          Write-Output "Element: $($element.name)"
          $currentCommit = git rev-parse HEAD
          $latestTag = ""
          
          if ($tag = git tag --points-at $currentCommit | Select-String "$($element.name)-v*") {
            Write-Output "Head commit has a tag for $($element.name) - $tag"
            $latestTag = $tag[0].Line
          }
          else {
            $tags = @()
            $parentCommits = git log --pretty=%P $currentCommit
            Write-Output "Parent Commits: $parentCommits"
            foreach ($parentCommit in $parentCommits.Split(" ")) {
              $tag = git tag --points-at $parentCommit | Select-String -Pattern "^$($element.name)-v"
              if ($tag) {
                Write-Output "Parent Commit: $parentCommit - Tag: $($tag.Line)"
                $tags += $tag.Line
              }
            }
            $uniqueTags = $tags | Select-Object -Unique
            foreach ($tag in $uniqueTags) {
              # Get the latest tag
              if ($latestTag -lt $tag) {
                $latestTag = $tag
              }
            }
          }
          $commit = git rev-list -n 1 $latestTag
          Write-Output "Latest tag for element '$($element.name)'.`r`n Commit: $commit `r`n Tag: $latestTag"
          $tagWithoutPrefix = $latestTag -replace "$($element.name)-v",""
          $tagBody += "#### Element: $($element.name) `r`n"
          $tagBody += " Latest Tag: $latestTag `r`n"
          $tagBody += " Latest Commit: $commit `r`n`r`n"
        }
        write-output $tagBody >> "tagBody.txt"
        

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'v${{ steps.get-release-tag.outputs.newReleaseVersion }}'
        release_name: 'v${{ steps.get-release-tag.outputs.newReleaseVersion }}'
        draft: false
        prerelease: false
        body_path: tagBody.txt

    - name: Output to Job Summary
      id: output-element
      shell: pwsh
      run: |
        Write-Host "New Release/Tag: v${{ steps.get-release-tag.outputs.newReleaseVersion }}"
        "# :rocket: :bookmark: New Release/Tag: v${{ steps.get-release-tag.outputs.newReleaseVersion }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "## Release Branch: ${{ github.ref_name }} `r`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        $tagBodyContent = Get-Content tagBody.txt -Raw
        Write-Host "Release Notes: `r`n $tagBodyContent"
        "## Release Notes: `r`n $tagBodyContent" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append